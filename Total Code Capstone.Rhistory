dfCapSL <- as.numeric(dfCapSL$`Away Score`)
dfCapSL <- as.numeric(dfCapSL$`Home Score`)
print(dfCapSL)
View(dfCapSL)
dfCapSL <- Capstone_CFA_Scores_and_Lines
dfCapSL <- separate(dfCapSL, Score, c("Away Score", "Home Score"), sep = "-")
View(dfCapSL)
dfCapSL$`Away Score` <- as.numeric(dfCapSL$`Away Score`)
dfCapSL$`Home Score` <- as.numeric(dfCapSL$`Home Score`)
print(dfCapSL)
dfCapSL <- mutate(dfCapSL, Predictor = (dfCapSL$ATOR-dfCapSL$HTOR)+(dfCapSL$HTDR-dfCapSL$ATDR))
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Predictor = (dfCapSL$ATOR-dfCapSL$HTOR)+(dfCapSL$HTDR-dfCapSL$ATDR)*100)
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Predictor = ((dfCapSL$ATOR-dfCapSL$HTOR)+(dfCapSL$HTDR-dfCapSL$ATDR))*100)
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Predictor = 100*(dfCapSL$ATOR-dfCapSL$HTOR)+(dfCapSL$HTDR-dfCapSL$ATDR))
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Predictor = ((dfCapSL$ATOR-dfCapSL$HTOR)+(dfCapSL$HTDR-dfCapSL$ATDR))*100)
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Prediction = ifelse(dfCapSL$Line>dfCapSL$Predictor, dfCapSL$`Home Team`, dfCapSL$`Away Team`))
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Bet Winner = ifelse((dfCapSL$`Away Score`- dfCapSL$`Home Score`)>dfCapSL$Line, dfCapSL$`Away Team`, dfCapSL$`Home Team`))
dfCapSL <- mutate(dfCapSL, BetWinner = ifelse((dfCapSL$`Away Score`- dfCapSL$`Home Score`)>dfCapSL$Line, dfCapSL$`Away Team`, dfCapSL$`Home Team`))
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Result = ifelse((dfCapSL$Predictor==dfCapSL$BetWinner, "Win", "Lose"))
dfCapSL <- mutate(dfCapSL, Result = ifelse((dfCapSL$Predictor == dfCapSL$BetWinner, "Win", "Lose"))
dfCapSL <- mutate(dfCapSL, Result = ifelse(dfCapSL$Predictor == dfCapSL$BetWinner, "Win", "Lose"))
View(dfCapSL)
dfCapSL <- mutate(dfCapSL, Result = ifelse(dfCapSL$Prediction == dfCapSL$BetWinner, "Win", "Lose"))
View(dfCapSL)
Data2010 <- filter(dfCapSL, dfCapSL$Year == 2010)
view(Data2010)
View(Data2010)
count(Data2010, Data2010$Result)
Data2011 <- filter(dfCapSL, dfCapSL$Year == 2011)
count(Data2011, Data2011$Result)
Data2012 <- filter(dfCapSL, dfCapSL$Year == 2012)
count(Data2012, Data2012$Result)
Data2013 <- filter(dfCapSL, dfCapSL$Year == 2013)
count(Data2013, Data2013$Result)
Data2014 <- filter(dfCapSL, dfCapSL$Year == 2014)
count(Data2014, Data2014$Result)
Data2015 <- filter(dfCapSL, dfCapSL$Year == 2015)
count(Data2015, Data2015$Result)
Data2016 <- filter(dfCapSL, dfCapSL$Year == 2016)
count(Data2016, Data2016$Result)
Data2017 <- filter(dfCapSL, dfCapSL$Year == 2017)
count(Data2017, Data2017$Result)
savehistory("~/DSIntroCapstone/Score Test and Year Test.Rhistory")
YearData <- count(Data2010, Data2010$Result)+count(Data2011, Data2011$Result)
count(Data2014, Data2014$Result, rm.na = TRUE)
Data2010 <- filter(dfCapSL, dfCapSL$Year == 2010, rm.na = TRUE)
YearData <- count(Data2015, Data2015$Result)+count(Data2016, Data2016$Result)
YearData <- count(Data2015, Data2015$Result) + count(Data2016, Data2016$Result)
YearData <- data_frame(count(Data2010, Data2010$Result))
YearWins <- c(349, 335, 362, 368, 370, 386, 348, 378)
YearDate <-c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017)
YearLosses <- c(321, 338, 322, 322, 346, 331, 367, 351)
YearData <- data.frame(YearDate, YearWins, YearLosses)
View(YearData)
YearData <- mutate(YearData, WinPct = YearWins / (YearWins+YearLosses))
DataWeek2 <- filter(dfCapSL, dfCapSL$Week == 2)
DataWeek3 <- filter(dfCapSL, dfCapSL$Week == 3)
DataWeek4 <- filter(dfCapSL, dfCapSL$Week == 4)
DataWeek5 <- filter(dfCapSL, dfCapSL$Week == 5)
DataWeek6 <- filter(dfCapSL, dfCapSL$Week == 6)
DataWeek7 <- filter(dfCapSL, dfCapSL$Week == 7)
DataWeek8 <- filter(dfCapSL, dfCapSL$Week == 8)
DataWeek9 <- filter(dfCapSL, dfCapSL$Week == 9)
DataWeek10 <- filter(dfCapSL, dfCapSL$Week == 10)
DataWeek11 <- filter(dfCapSL, dfCapSL$Week == 11)
DataWeek12 <- filter(dfCapSL, dfCapSL$Week == 12)
DataWeek13 <- filter(dfCapSL, dfCapSL$Week == 13)
DataWeek14 <- filter(dfCapSL, dfCapSL$Week == 14)
DataWeek15 <- filter(dfCapSL, dfCapSL$Week == 15)
DataWeekBowls <- filter(dfCapSL, dfCapSL$Week == BOWLS)
DataWeekBowls <- filter(dfCapSL, dfCapSL$Week == 'BOWLS')
count(DataWeek2, DataWeek2$Result)
count(DataWeek3, DataWeek3$Result)
count(DataWeek4, DataWeek4$Result)
count(DataWeek5, DataWeek5$Result)
count(DataWeek6, DataWeek6$Result)
count(DataWeek7, DataWeek7$Result)
count(DataWeek8, DataWeek8$Result)
count(DataWeek9, DataWeek9$Result)
count(DataWeek10, DataWeek10$Result)
count(DataWeek11, DataWeek11$Result)
count(DataWeek12, DataWeek12$Result)
count(DataWeek13, DataWeek13$Result)
count(DataWeek14, DataWeek14$Result)
count(DataWeek15, DataWeek15$Result)
count(DataWeekBowls, DataWeekBowls$Result)
Week <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, Bowls)
GameWeek <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, Bowls)
GameWeek <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
WeekWins <- c(173, 205, 208, 212, 219, 204, 215, 214, 241, 242, 220, 254, 114, 15, 160)
WeekLosses <- c(160, 193, 186, 209, 218, 221, 207, 211, 202, 200, 219, 201, 115, 15, 141)
WeekData <- data.frame(GameWeek, WeekWins, WeekLosses)
WeekData <- mutate(WeekData, WinPct = WeekWins / (WeekWins+WeekLosses))
View(WeekData)
savehistory("~/DSIntroCapstone/Code Through Week Testing.Rhistory")
FQWeeks <- filter(WeekData, GameWeek < 5)
View(FQWeeks)
FQWeeks <- filter(WeekData, GameWeek < 6)
summarise(FQWeeks, Total = cumsum(WeekWins), TL = cumsum(WeekLosses))
?summarise_at
summarise_at(c(WeekWins, WeekLosses), cumsum, na.rm = TRUE)
?colSums
FQTotal <- colSums(FQWeeks)
print(FQTotal)
SQWeeks <- filter(WeekData, 5 < GameWeek < 10)
SQWeeks <- filter(WeekData, GameWeek < 10 & GameWeek > 5)
View(SQWeeks)
SQTotal <- colSums(SQWeeks)
TQWeeks <- filter(WeekData, GameWeek < 14 & GameWeek > 9)
TQTotal <- colSums(TQWeeks)
LQWeeks <- filter(WeekData, GameWeek >13)
LQTotal <- colSums(LQWeeks)
QuarData <- data.frame(FQTotal, SQTotal, TQTotal, LQTotal)
View(QuarData)
QuarData$GameWeek <- c(1, 2, 3, 4)
QuarData <- t(QuarData)
QuarData <- QuarData[-c(5)]
QuarData <- data.frame(FQTotal, SQTotal, TQTotal, LQTotal)
QuarData <- QuarData[-c(4),]
QuarData <- data.frame(FQTotal, SQTotal, TQTotal, LQTotal)
QuarData <- t(QuarData)
colnames(QuarData)[1] <- "Quarter"
View(QuarData)
QuarData$Quarter <- c(1, 2, 3, 4)
QuarData <- data.frame(FQTotal, SQTotal, TQTotal, LQTotal)
QuarData <- t(QuarData)
colnames(QuarData)[1] <- "Quarter"
View(QuarData)
colnames(QuarData)[1] <- "QtrWins"
colnames(QuarData)[2] <- "QtrWins"
colnames(QuarData)[1] <- "Quarter"
colnames(QuarData)[3] <- "QtrLosses"
View(QuarData)
QuarData$Quarter <- c("First", Second", Third", "Final")
QuarData$Quarter <- c("First", "Second", "Third", "Final")
QuarData <- data.frame(FQTotal, SQTotal, TQTotal, LQTotal)
QuarData <- t(QuarData)
colnames(QuarData)[2] <- "QtrWins"
colnames(QuarData)[3] <- "QtrLosses"
QuarData <- subset(QuarData, select = -c(QuarData$GameWeek))
QuarData <- subset(QuarData, select = -c(GameWeek))
QuarData$WinPct <- QuarData$QtrWins / (QuarData$QtrWins + QuarData$QtrLosses)
QuarData <- transmute(QuarData, WinPct = QuarData$QtrWins / (QuarData$QtrWins + QuarData$QtrLosses))
print(QuarData)
str(QuarData)
QuarData <- transmute(QuarData, WinPct = QtrWins / (QtrWins + QtrLosses))
QuarData$QtrWins <- as.numeric(QuarData$QtrWins)
QuarData <- mutate(QuarData, Pct = QtrWins / (QtrWins + QtrLosses))
QuarData <- data.frame(QuarData)
QuarData <- mutate(QuarData, Pct = QtrWins / (QtrWins + QtrLosses))
QuarData <- subset(QuarData, select = -c(WinPct))
savehistory("~/DSIntroCapstone/Code Through Week Testing.Rhistory")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("plyr", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
Neutral <- filter(dfCapSL, Neutral == 1)
count (Neutral, Result)
count(Neutral, Neutral$Result)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
count(Neutral, Neutral$Result)
count(Neutral, Result)
FavDog <- mutate(dfLine, BetType = if(dfLine$`Away Team` == dfLine$Prediction & dfLine$Line > 0){BetType = "AF"})
FavDog <- mutate(dfLine, BetType = if(dfLine$`Away Team` == dfLine$Prediction & dfLine$Line > 0){BetType = "AF"}
else if (dfLine$`Away Team` == dfLine$Prediction & dfLine$Line < 0){BetType = "AD"}
else if (dfLine$`Home Team` == dfLine$Prediction & dfLine$Line > 0){BetType = "HD"}
else {BetType = "HF"})
FavDog <- mutate(dfLine, BetType = if(dfLine$`Away Team` == dfLine$Prediction & dfLine$Line > 0){BetType = "AF"}
View(FavDog)
str(dfLine)
FavDog <- mutate(dfLine, BetType = if(dfLine$`Away Team` = dfLine$Prediction & dfLine$Line > 0){BetType = "AF"}
FavDog <- mutate(dfLine, BetType = if(dfLine$`Away Team` == dfLine$Prediction & dfLine$Line > 0){BetType = "AF"}
FavDog <-mutate(dfLine, BetTypeLoc = ifelse(dfLine$`Away Team` == dfLine$Prediction, "Away", "Home"))
FavDog <-mutate(dfLine, BetTypeLoc = ifelse(dfLine$`Away Team` == dfLine$Prediction, 1, 0))
View(FavDog)
FavDog <- mutate(FavDog, BetType = if(BetTypeLoc == 1 * FavDog$Line > 0){BetType = "AF"}
FavDog <- mutate(FavDog, BetType = if(BetTypeLoc == 1 & FavDog$Line > 0){BetType = "AF"}
else if (BetTypeLoc == 1 & FavDog$Line < 0){BetType = "AD"}
else if (BetTypeLoc == 0 & FavDog$Line > 0){BetType = "HD"}
else {BetType = "HF"}
View(FavDog)
FavDog <- mutate(FavDog, BetType = if(BetTypeLoc == 1 & FavDog$Line > 0){BetType = "AF"}
else if (BetTypeLoc == 1 & FavDog$Line < 0){BetType = "AD"}
else if (BetTypeLoc == 0 & FavDog$Line > 0){BetType = "HD"}
else {BetType = "HF"}))
FavDog <- mutate(FavDog, BetType = if(BetTypeLoc == 1 & FavDog$Line > 0){BetType = "AF"} else if (BetTypeLoc == 1 & FavDog$Line < 0){BetType = "AD"} else if (BetTypeLoc == 0 & FavDog$Line > 0){BetType = "HD"} else {BetType = "HF"})
str(FavDog)
Home <- filter(dfLine, dfLine$`Home Team`==dfLine$Prediction)
View(Home)
HomeFav <- filter(Home, Home$Line < 0)
View(HomeFav)
print(HomeFav)
count(HomeFav, Bet.Result)
HomeDog <- filter(Home, Home$Line > 0)
count(HomeDog, Bet.Result)
Away <- filter(dfLine, dfLine$`Away Team`==dfLine$Prediction)
AwayFav <- filter(Away, Away$Line > 0)
count(AwayFav)
count(AwayFav, Bet.Result)
AwayDog <- filter(Away, Away$Line < 0)
count(AwayDog)
count(AwayDog, Bet.Result)
FavDog <- count(AwayDog, Bet.Result)
View(FavDog)
FavDog <- full_join(FavDog, count(AwayFav, Bet.Result), by = "Bet.Result")
FavDog <- full_join(FavDog, count(HomeFav, Bet.Result), by = "Bet.Result")
FavDog <- full_join(FavDog, count(HomeDog, Bet.Result), by = "Bet.Result")
FavDog <- full_join(FavDog, count(Neutral, Bet.Result), by = "Bet.Result")
count(Neutral, Bet.Result)
View(Neutral)
colnames(Neutral)[17] <- "Bet.Result"
FavDog <- full_join(FavDog, count(Neutral, Bet.Result), by = "Bet.Result")
View(FavDog)
count(Neutral, Bet.Result)
FavDog <- FavDog[-c(3), ]
View(FavDog)
FavDog <-t(FavDog)
colnames(FavDog)[1] <- "Losses"
colnames(FavDog)[2] <- "Losses"
View(FavDog)
colnames(FavDog)[2] <- "Wins"
colnames(FavDog)[1] <- "Losses"
View(FavDog)
FavDog <- FavDog[-c(1), ]
rownames(FavDog)[1] <- "Away Team Underdog"
rownames(FavDog)[2] <- "Away Team Favorite"
rownames(FavDog)[3] <- "Home Team Favorite"
rownames(FavDog)[4] <- "Home Team Underdog"
rownames(FavDog)[5] <- "Neutral Site Game"
View(FavDog)
FavDog <- mutate(FavDog, WinPercent = Wins / (Wins + Losses))
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
FavDog <- mutate(FavDog, WinPercent = Wins / (Wins + Losses))
FavDog <- data.frame(FavDog)
FavDog <- mutate(FavDog, WinPercent = Wins / (Wins + Losses))
print(FavDog)
FavDog <- mutate(FavDog, WinPercent = FavDog$Wins / (FavDog$Wins + FavDog$Losses))
str(FavDog)
print(FavDog)
FavDog$Wins <- as.numeric(FavDog$Wins)
FavDog$Losses <- as.numeric(FavDog$Losses)
FavDog <- mutate(FavDog, WinPercent = FavDog$Wins / (FavDog$Wins + FavDog$Losses))
View(FavDog)
FavDog$Losses <- c(750, 771, 930, 235, 190)
View(FavDog)
FavDog$Wins <- c(860, 852, 898, 256, 209)
FavDog <- mutate(FavDog, WinPercent = FavDog$Wins / (FavDog$Wins + FavDog$Losses))
View(FavDog)
rownames(FavDog)[1] <- "Away Team Underdog"
rownames(FavDog)[2] <- "Away Team Favorite"
rownames(FavDog)[3] <- "Home Team Favorite"
rownames(FavDog)[4] <- "Home Team Underdog"
rownames(FavDog)[5] <- "Neutral Site Game"
View(FavDog)
OverUnder <- filter(dfCapSL, dfCapSL$`Over/Under` > 0)
View(OverUnder)
OUTest <- select(OverUnder, OverUnder$`Away Team`, OverUnder$`Home Team`, OverUnder$`Over/Under`, OverUnder$ATOR,OverUnder$ATDR, OverUnder$HTOR, OverUnder$HTDR, OverUnder$`Away Score`, OverUnder$`Home Score` )
OUTest <- select(OverUnder, OverUnder$`Away Team`:OverUnder$`Home Score`)
str(OverUnder)
OUTest <- select(OverUnder, OverUnder$`Over/Under`:OverUnder$`Home Score`)
OUTest <- select(OverUnder, OverUnder$`Over/Under`, OverUnder$ATOR,OverUnder$ATDR, OverUnder$HTOR, OverUnder$HTDR, OverUnder$`Away Score`, OverUnder$`Home Score` )
OverUnder <- select(OverUnder, OverUnder$`Away Team`:OverUnder$`Home Score`)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:plyr", unload=TRUE)
library("plyr", lib.loc="~/R/win-library/3.4")
detach("package:tidyr", unload=TRUE)
library("tidyr", lib.loc="~/R/win-library/3.4")
OverUnder <- select(OverUnder, OverUnder$`Away Team`:OverUnder$`Home Score`)
detach("package:plyr", unload=TRUE)
detach("package:tidyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
library("plyr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
OverUnder <- select(OverUnder, OverUnder$`Away Team`:OverUnder$`Home Score`)
OverUnder <- select(OverUnder, -OverUnder$Year)
View(OverUnder)
OverUnder <- select(OverUnder, -OverUnder$Year)
View(OverUnder)
OverUnder <- select(OverUnder, -OverUnder$Week)
OverUnder <- select(OverUnder, -OverUnder$Week)
OverUnder <- select(OverUnder, -OverUnder$Neutral)
View(OverUnder)
str(OverUnder)
View(dfCapSL2)
OverUnder <- filter(dfCapSL2, dfCapSL$`Over/Under` > 0)
View(dfCapSL2)
View(OverUnder)
OverUnder <- select(OverUnder, -Neutral)
View(OverUnder)
OverUnder <- select(OverUnder, -OverUnder$`Game Winner`)
OverUnder <- select(OverUnder, -`Game Winner`)
View(OverUnder)
OverUnder <-select(OverUnder, -`Year`)
OverUnder <-select(OverUnder, -`Week`)
View(OverUnder)
OverUnder <-transmute(OverUnder, AdjATOR = (OverUnder$ATOR-0.5236) / 0.01415))
OverUnder <-transmute(OverUnder, AdjATOR = (OverUnder$ATOR-0.5236) / 0.01415)
View(OverUnder)
OverUnder <- filter(dfCapSL2, dfCapSL$`Over/Under` > 0)
OverUnder <- select(OverUnder, -Neutral)
OverUnder <- select(OverUnder, -`Game Winner`)
OverUnder <-mutate(OverUnder, AdjATOR = (OverUnder$ATOR-0.5236) / 0.01415)
View(OverUnder)
OverUnder <-select(OverUnder, -`Line`)
OverUnder <-mutate(OverUnder, AdjATDR = (OverUnder$ATOR-0.5236) / 0.01415)
OverUnder <-mutate(OverUnder, AdjHTOR = (OverUnder$ATOR-0.5236) / 0.01415)
OverUnder <-mutate(OverUnder, AdjHTOR = (OverUnder$HTOR-0.5236) / 0.01415)
OverUnder <-mutate(OverUnder, AdjATDR = (OverUnder$ATDR-0.5236) / 0.01415)
OverUnder <-mutate(OverUnder, AdjHTDR = (OverUnder$HTDR-0.5236) / 0.01415)
View(OverUnder)
OverUnder <- mutate(OverUnder, OUGuess = (cummean(OverUnder$AdjATOR:OverUnder$AdjHTDR)*2))
OverUnder <- mutate(OverUnder, OUGuess = (OverUnder$AdjATOR+OverUnder$AdjATDR+OverUnder$AdjHTOR+OverUnder$AdjHTDR)/2)
View(OverUnder)
OverUnder <- mutate(OverUnder, Prediction = ifelse(OverUnder$`Over/Under` > OverUnder$OUGuess, "Over", "Under"))
OverUnder <- mutate(OverUnder, GameResult = ifelse (OverUnder$`Away Score`+ OverUnder$`Home Score`> OverUnder$`Over/Under`, "Over", "Under"))
str(OverUnder)
OverUnder$`Away Score` <- as.numeric(OverUnder$`Away Score`)
OverUnder$`Home Score` <- as.numeric(OverUnder$`Home Score`)
OverUnder <- mutate(OverUnder, GameResult = ifelse (OverUnder$`Away Score`+ OverUnder$`Home Score`> OverUnder$`Over/Under`, "Over", "Under"))
View(OverUnder)
OverUnder <- mutate(OverUnder, BetResult = ifelse (OverUnder$Prediction == OverUnder$GameResult, "Win", "Loss"))
View(OverUnder)
Count(OverUnder, BetResult)
count(OverUnder, BetResult)
savehistory("~/DSIntroCapstone/All Code with OverUnder.Rhistory")
View(QuarData)
View(QuarData)
View(DataWeekBowls)
View(DataWeekBowls)
Count(DataWeekBowls)
library("plyr", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
Count(DataWeekBowls)
count(DataWeekBowls)
count(DataWeekBowls, Result)
View(FavDog)
View(dfLine)
count(dfLine, Bet.Result)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
print(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
View(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
library("knitr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:dplyr", unload=TRUE)
library("plyr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("bindrcpp", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
knit('Capstone_CFA_Scores_and_Lines.Rmd')
knit(Capstone_CFA_Scores_and_Lines)
load(Capstone_CFA_Scores_and_Lines)
load(Capstone_CFA_Scores_and_Lines)
load(Capstone_CFA_Scores_and_Lines.RData)
load("Capstone_CFA_Scores_and_Lines.RData")
knit(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
knit(Capstone_CFA_Scores_and_Lines)
knit(Capstone_Project2.Rmd)
knit('Capstone_Project2.Rmd')
str(Capstone_CFA_Scores_and_Lines)
library("plyr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
knitr::opts_chunk$set(echo = TRUE)
print(Capstone_CFA_Scores_and_Lines)
View(Capstone_CFA_Scores_and_Lines)
plot(PvROgg)
library("stringi", lib.loc="~/R/win-library/3.4")
summary(PvROgg)
PvROgg1 <- lm(OffRate ~ OffScore, data=PvROff)
summary(PvROgg1)
PvRDgg1 <- lm(DefRate ~ DefScore, data=PvRDef)
summary(PvRDgg1)
summary(PvROgg1)
knitr::Capstone_CFA_Scores_and_Lines(echo = TRUE)
print(Capstone_CFA_Scores_and_Lines)
print(Capstone_CFA_Scores_and_Lines)
library("rmarkdown", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
detach("package:knitr", unload=TRUE)
detach("package:rmarkdown", unload=TRUE)
library("rmarkdown", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
print(Capstone_CFA_Scores_and_Lines)
save(Capstone_CFA_Scores_and_Lines, file="ScoresLines.RData")
load(file="ScoresLines.RData")
print(ScoresLines)
load(file="ScoresLines.RData")
print(ScoresLines.RData)
print(Capstone_CFA_Scores_and_Lines)
getwd()
print(Capstone_CFA_Scores_and_Lines)
print("Capstone_CFA_Scores_and_Lines"")
print("Capstone_CFA_Scores_and_Lines")
print(Capstone_CFA_Scores_and_Lines)
source('~/DSIntroCapstone/DSIntroCapstone.Rproj', encoding = 'UTF-8')
chunk1 <- read.csv("dfCapTidy.csv"")
chunk1 <- read.csv("dfCapTidy.csv")
print(chunk1)
chunk1 <- read.csv("dfCapTidy.csv")
str(chunk1)
chunk1 <- read.csv("dfCapTidy.csv")
str(chunk1)
chunk1 <- read_csv("Capstone CFA Scores and Lines.csv")
chunk1 <- read.csv("Capstone CFA Scores and Lines.csv")
str(chunk1)
chunk1 <- read.csv("Capstone CFA Scores and Lines.csv")
View(chunk1)
chunk1 <- read.csv("Capstone CFA Scores and Lines.csv")
str(chunk1)
chunk2 <- read.csv("dfCapTidy.csv")
str(chunk2)
write.csv(file = DefGraph, x = PvRDef)
write.csv(file = PvRDef, x = DefGraph)
write.csv(PvRDef, file = "DefGraph")
chunkdef <- read.csv("DefGraph.csv")
str(chunkdef)
write.csv(PvRDef, file = "DefGraph.csv")
chunkdef <- read.csv("DefGraph.csv")
str(chunkdef)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefScore ~ DefRate, data = chunkdef)
summary(defgraph)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefScore ~ DefRate, data = chunkdef)
plot(defgraph)
summary(defgraph)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
plot(defgraph)
summary(defgraph)
library("ggplot2", lib.loc="~/R/win-library/3.4")
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
summary(defgraph)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
summary(defgraph)
print(DGG)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.4")
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
summary(defgraph)
print(DGG)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot2(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
summary(defgraph)
print(DGG)
library(ggplot2)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
summary(defgraph)
print(DGG)
library(ggplot2)
chunkdef <- read.csv("DefGraph.csv")
defgraph <- lm(DefRate ~ DefScore, data = chunkdef)
DGG <- ggplot(chunkdef, aes(DefScore, DefRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
print(DGG)
summary(defgraph)
write.csv(PvROff, file = "OffGraph.csv")
library(ggplot2)
chunkoff <- read.csv("OffGraph.csv")
offgraph <- lm(OffRate ~ OffScore, data = chunkoff)
OGG <- ggplot(chunkoff, aes(OffScore, OffRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
print(OGG)
summary(offgraph)
library(ggplot2)
chunkoff <- read.csv("OffGraph.csv")
offgraph <- lm(OffRate ~ OffScore, data = chunkoff)
OGG <- ggplot(chunkoff, aes(OffScore, OffRate)) + geom_smooth(method = "lm", color = "blue", formula = y~x) + geom_point()
print(OGG)
summary(offgraph)
results <- read.csv("Results.csv")
print(results)
savehistory("~/DSIntroCapstone/Total Code Capstone.Rhistory")
